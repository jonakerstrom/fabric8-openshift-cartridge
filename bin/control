#!/bin/bash
source $OPENSHIFT_CARTRIDGE_SDK_BASH

FABRIC8_BIN_DIR=${OPENSHIFT_FABRIC8_DIR}/container/bin
FABRIC8_PID_FILE=${OPENSHIFT_FABRIC8_DIR}/container/instances/instance.properties
FABRIC8_PASSWD_FILE=${OPENSHIFT_FABRIC8_DIR}/container/etc/passwd
FABRIC8_USRPROPS_FILE=${OPENSHIFT_FABRIC8_DIR}/container/etc/users.properties
FABRIC8_SYSPROPS_FILE=${OPENSHIFT_FABRIC8_DIR}/container/etc/system.properties
FABRIC_CHECKER=${OPENSHIFT_FABRIC8_DIR}/container/etc/fabric-configured

function replace_property_value {
  sed "s/$1.*=.*/$1 = $2/g" $3 > $3.tmp
  rm $3
  mv $3.tmp $3
}

function setup() {
	client_result "Setting up fabric container"

	# Retrieve password
	if [ ! -z "${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD:-}" ]; then
		client_result "Using provided password from cartridge"
    elif [ ! -z "${OPENSHIFT_FABRIC8_DOMAIN_ZOOKEEPER_PASSWORD:-}" ]; then
		client_result "Using provided password from domain"
		export OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD=${OPENSHIFT_FABRIC8_DOMAIN_ZOOKEEPER_PASSWORD}
        set_env_var OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD "${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}" env
	else
		# generate password and setup env vars
		client_result "Generating password"
		export OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD=$(generate_password)
        set_env_var OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD "${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}" env
	fi
	# Store password
	echo "admin=${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD},admin" > $FABRIC8_USRPROPS_FILE
	echo "${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}" > $FABRIC8_PASSWD_FILE
	echo "zookeeper.password=${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}" >> $FABRIC8_SYSPROPS_FILE

	# Configure to join an existing fabric
	join=false	
	if [ ! -z "${OPENSHIFT_FABRIC8_ZOOKEEPER_URL:-}" ]; then
		client_result "Using provided url from cartridge"
		echo "zookeeper.url=$OPENSHIFT_FABRIC8_ZOOKEEPER_URL" >> $FABRIC8_SYSPROPS_FILE
	elif  [ ! -z "${OPENSHIFT_FABRIC8_DOMAIN_ZOOKEEPER_URL:-}" ]; then
		client_result "Using provided url from domain"
		echo "zookeeper.url=$OPENSHIFT_FABRIC8_DOMAIN_ZOOKEEPER_URL" >> $FABRIC8_SYSPROPS_FILE
		export OPENSHIFT_FABRIC8_ZOOKEEPER_URL=${OPENSHIFT_FABRIC8_DOMAIN_ZOOKEEPER_URL}
        set_env_var OPENSHIFT_FABRIC8_ZOOKEEPER_URL "${OPENSHIFT_FABRIC8_ZOOKEEPER_URL}" env
		join=true
	# Turn into a fabric root container
	else
		# Additional system properties
		client_result "Configuring zookeeper server"
		export OPENSHIFT_FABRIC8_ZOOKEEPER_URL=${OPENSHIFT_GEAR_DNS}:${OPENSHIFT_FABRIC8_ZOOKEEPER_PROXY_PORT}
        set_env_var OPENSHIFT_FABRIC8_ZOOKEEPER_URL "${OPENSHIFT_FABRIC8_ZOOKEEPER_URL}" env
		replace_property_value ensemble.auto.start true $FABRIC8_SYSPROPS_FILE
		echo "zookeeper.server.port=${OPENSHIFT_FABRIC8_ZOOKEEPER_PORT}" >> $FABRIC8_SYSPROPS_FILE
		echo "zookeeper.server.connection.port=${OPENSHIFT_FABRIC8_ZOOKEEPER_PROXY_PORT}" >> $FABRIC8_SYSPROPS_FILE
	fi

	client_result ""
	client_result "Fabric8 created successfully.  Please make note of these credentials:"
	client_result ""
	client_result "   Console URL:        http://${OPENSHIFT_GEAR_DNS}"
	client_result "   Console User:       admin"
	client_result "   Console Password:   ${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}"
	client_result "   Zookeeper URL:      ${OPENSHIFT_FABRIC8_ZOOKEEPER_URL}"
	client_result "   Zookeeper Password: ${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}"
	client_result ""
	client_result "   The Fabric8 Management Console will be available shortly at: http://${OPENSHIFT_GEAR_DNS}"
	client_result ""
	
	add_domain_env_var "OPENSHIFT_FABRIC8_DOMAIN_ZOOKEEPER_URL=${OPENSHIFT_FABRIC8_ZOOKEEPER_URL}"
	add_domain_env_var "OPENSHIFT_FABRIC8_DOMAIN_ZOOKEEPER_PASSWORD=${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}"
	
	cart_props "username=admin"
	cart_props "password=${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD}"
		
	${FABRIC8_BIN_DIR}/start
	wait_for_start    
	
	
	if $join; then
        ${FABRIC8_BIN_DIR}/client -r 3 -h ${OPENSHIFT_FABRIC8_IP} -a ${OPENSHIFT_FABRIC8_SSH_PORT} -u admin -p ${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD} "wait-for-service io.fabric8.boot.commands.service.Join"
        ${FABRIC8_BIN_DIR}/client -h ${OPENSHIFT_FABRIC8_IP} -a ${OPENSHIFT_FABRIC8_SSH_PORT} -u admin -p ${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD} "fabric:join -f -b ${OPENSHIFT_FABRIC8_IP} --zookeeper-password ${OPENSHIFT_FABRIC8_ZOOKEEPER_PASSWORD} ${OPENSHIFT_FABRIC8_ZOOKEEPER_URL}"
		client_result "WARNING: Creating fabric containers directly from"
		client_result "         openshift is supported in a limited way"
		client_result "         as such containers can not be fully managed"
		client_result "         by fabric."
	fi

	echo "true" > $FABRIC_CHECKER
}

function start() {
  if is_running; then
    client_message "Fabric8 cart already started"
  else  
    if [ ! -f $FABRIC_CHECKER ]; then
      setup
    else
    ${FABRIC8_BIN_DIR}/start
      wait_for_start
    fi
    client_message "Started Fabric8 cart"
  fi
}

function stop() {
    if [ -f $FABRIC8_PID_FILE ]; then
        PID=`cat $FABRIC8_PID_FILE | grep "item.0.pid" | awk -F " = " '{print $2}'`
        ${FABRIC8_BIN_DIR}/stop
        for i in {1..20};
            do
                if ps -p $PID > /dev/null; then
                    echo "Fabric has been successfully stopped"
                    rm $FABRIC8_PID_FILE
                    break
                else
                    sleep 3
                fi
            done
        client_result "Stopped Fabric8 cart"
    else
         echo "Fabric8 cart was stopped already"
    fi
}

function restart() {
    if is_running; then
        stop
    fi
    start
}

function status() {
   if is_running; then
      client_result "Application is running"
   else
      client_result "Application is either stopped or inaccessible"
   fi
}

function reload() {
    client_message "Reloading Fabric8 cart"
    restart
}

function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_FABRIC8_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_FABRIC8_LOG_DIR/*
}

function is_running() {
   #Check if instance file exists
   if [ ! -f $FABRIC8_PID_FILE ]; then
      return 1
   fi

   #Check if pid exists
   PID=`cat $FABRIC8_PID_FILE | grep "item.0.pid" | awk -F " = " '{print $2}'`
   if [ "$PID" = "" ]; then
      return 1
   elif ps -p $PID > /dev/null; then
      return 0
   else
      rm $FABRIC8_PID_FILE
      return 1
   fi
}

function wait_for_start() {
  for i in {1..20};
     do
       if [ ! -f $FABRIC8_PID_FILE ]; then
         sleep 1
       else
         break
       fi
     done
   if [ -f $FABRIC8_PID_FILE ]; then
      for j in {1..20};
         do
           PID=`cat $FABRIC8_PID_FILE | grep "item.0.pid" | awk -F "=" '{print $2}'`
           if [ "$PID" = "" ]; then
             sleep 1
           else
            break
           fi
     done
     if ps -p $PID > /dev/null; then
       client_result "Fabric($PID) is started successfully"
     else
       client_error "Command Failed: Fabric8 process ($PID) is not running"
     fi
   else
    client_error "Command Failed:Could not find Fabric8 instance.properties"
   fi
}

function deploy() {
	if [ "$OPENSHIFT_FABRIC8_FABRIC" = "false" ]; then
		client_result "Standalone deployment"
		cp -rf ${OPENSHIFT_REPO_DIR}* $OPENSHIFT_FABRIC8_DIR/container/deploy	
	else
		client_result "Fabric deployment"
		fabric_shell "fabric:profile-import file:${OPENSHIFT_REPO_DIR}"	
	fi
}

function fabric_shell() {
 password=`cat ${FABRIC8_PASSWD_FILE}`
 client_message "Connnecting to Fabric8 shell using: ${password}"
 ${FABRIC8_BIN_DIR}/client -h ${OPENSHIFT_FABRIC8_IP} -u admin -p ${password} $*
 client_result "${FABRIC8_BIN_DIR}/client -h ${OPENSHIFT_FABRIC8_IP} -u admin -p ${password} $*"
}

case "$1" in
  deploy)    deploy ;;
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  status)    status ;;
  reload)    reload ;;
  tidy)      tidy ;;
  *)         exit 0
esac
